[
    {
        "id": 1,
        "name": "Coin Toss Probability",
        "description": "Write a function that simulates tossing a fair coin `n` times and returns the probability of getting heads.",
        "test_cases": [
            {
                "input": 100,
                "expected_output": 0.5
            },
            {
                "input": 1000,
                "expected_output": 0.5
            }
        ],
        "right_solution": "import random\n\ndef right_solution(n):\n    heads_count = 0\n    for _ in range(n):\n        if random.choice(['heads', 'tails']) == 'heads':\n            heads_count += 1\n    return heads_count / n",
        "starting_code": "# Write your solution under solution(n):\n# You can create as many functions as you want and call them inside solution(n):\ndef solution(n):\n    return 0.5\n",
        "severity": "easy"
    },
    {
        "id": 2,
        "name": "Dice Roll Probability",
        "description": "Write a function that simulates rolling a fair six-sided die `n` times and returns the probability of rolling a six.",
        "test_cases": [
            {
                "input": 60,
                "expected_output": 0.16666666666666666
            },
            {
                "input": 600,
                "expected_output": 0.16666666666666666
            }
        ],
        "right_solution": "import random\n\ndef right_solution(n):\n    six_count = 0\n    for _ in range(n):\n        if random.randint(1, 6) == 6:\n            six_count += 1\n    return six_count / n",
        "starting_code": "# Write your solution under solution(n):\n# You can create as many functions as you want and call them inside solution(n):\ndef solution(n):\n    return 1/6\n",
        "severity": "easy"
    },
    {
        "id": 3,
        "name": "Card Draw Probability",
        "description": "Write a function that simulates drawing a card from a standard 52-card deck `n` times and returns the probability of drawing an Ace.",
        "test_cases": [
            {
                "input": 52,
                "expected_output": 0.07692307692307693
            },
            {
                "input": 520,
                "expected_output": 0.07692307692307693
            }
        ],
        "right_solution": "import random\n\ndef right_solution(n):\n    ace_count = 0\n    for _ in range(n):\n        if random.choice(['Ace', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'Jack', 'Queen', 'King']) == 'Ace':\n            ace_count += 1\n    return ace_count / n",
        "starting_code": "# Write your solution under solution(n):\n# You can create as many functions as you want and call them inside solution(n):\ndef solution(n):\n    return 4/52\n",
        "severity": "easy"
    },
    {
        "id": 4,
        "name": "Marble Draw Probability",
        "description": "Write a function that simulates drawing a marble from a bag containing 3 red, 2 blue, and 1 green marble `n` times and returns the probability of drawing a red marble.",
        "test_cases": [
            {
                "input": 60,
                "expected_output": 0.5
            },
            {
                "input": 600,
                "expected_output": 0.5
            }
        ],
        "right_solution": "import random\n\ndef right_solution(n):\n    red_count = 0\n    for _ in range(n):\n        if random.choice(['red', 'red', 'red', 'blue', 'blue', 'green']) == 'red':\n            red_count += 1\n    return red_count / n",
        "starting_code": "# Write your solution under solution(n):\n# You can create as many functions as you want and call them inside solution(n):\ndef solution(n):\n    return 3/6\n",
        "severity": "easy"
    },
    {
        "id": 5,
        "name": "Random Walk Probability",
        "description": "Write a function that simulates a random walk on a 2D grid starting from the origin (0, 0). The function should simulate `n` steps, where each step is randomly chosen from the four possible directions: up, down, left, or right. After `n` steps, the function should determine if the walker is back at the origin (0, 0). The function should repeat this simulation for a specified number of trials to estimate the probability of the walker being at the origin after `n` steps. The function should return this estimated probability.",
        "test_cases": [
            {
                "input": [4, 10000],
                "expected_output": 0.25
            },
            {
                "input": [100, 10000],
                "expected_output": 0.1
            }
        ],
        "right_solution": "import random\n\ndef right_solution(input_list):\n    steps, trials = input_list\n    origin_count = 0\n    for _ in range(trials):\n        x, y = 0, 0\n        for _ in range(steps):\n            step = random.choice(['up', 'down', 'left', 'right'])\n            if step == 'up':\n                y += 1\n            elif step == 'down':\n                y -= 1\n            elif step == 'left':\n                x -= 1\n            elif step == 'right':\n                x += 1\n        if x == 0 and y == 0:\n            origin_count += 1\n    return origin_count / trials",
        "starting_code": "# Write your solution under solution(input_list):\n# You can create as many functions as you want and call them inside solution(input_list):\ndef solution(input_list):\n    steps, trials = input_list\n    return 0.0  # Placeholder value",
        "severity": "medium"
    }
]